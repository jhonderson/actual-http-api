const express = require('express');

const yaml = require('js-yaml');

if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const v1Routes = require("./src/v1/routes");

const app = express();

app.use(express.json());

app.use("/v1", v1Routes);

// Catch-all error handler
app.use(function(err, req, res, next) {
  console.log('Internal server error:', err);
  res.status(err.status || 500).json({"error": "Internal server error"});
});

const swaggerUi = require('swagger-ui-express');
const { openapiSpecification } = require('./src/config/swagger');
app.use('/api-docs', swaggerUi.serve);
// Workaround to allow user to download swagger.json file
app.get('/api-docs', swaggerUi.setup(null, {
  swaggerOptions: {
    url: '/api-docs/swagger.json'
  }
}));
app.get('/api-docs/swagger.json', (req, res) => res.json(openapiSpecification));
app.get('/api-docs/swagger.yaml', (req, res) => {
  res.type('yaml').send(yaml.dump(openapiSpecification));
});

const port = process.env.PORT || 5007;

app.listen(port, () => {
    console.log("Actual HTTP Server Listening on PORT: ", port);
  });

/**
 * Errors generated by @actual-app/api library make the server crash.
 * This can be problematic for the HTTP api since a normal behaviour such as looking
 * for an nonexisting account would make the app crash. Preventing this by capturing
 * the unhandled rejection errors and ignoring them if they come from @actual-app/api
 */
function ignoreUnhandledRejectionsCausedByActualApiLibrary(reason, promise) {
  if (isErrorComingFromActualApi(reason) && !doesActualErrorRequiresRestartingTheHttpService(reason)) {
    console.log('Ignoring unhandledRejection caused by Actual api library');
    return;
  }
  console.log('unhandledRejection', reason);
  process.exit(1);
}

function isErrorComingFromActualApi(reason) {
  return reason
    && ((reason.stack && reason.stack.indexOf('@actual-app/api') != -1) || reason.type == 'APIError');
}

/**
 * Forcing a restart if there is a problem opening a budget that was successfully
 * opened before.
 */
function doesActualErrorRequiresRestartingTheHttpService(reason) {
  return reason && reason.stack && reason.stack.indexOf('We had an unknown problem opening') != -1;
}

process.on('unhandledRejection', ignoreUnhandledRejectionsCausedByActualApiLibrary);